import { useState } from "react";

import Stack from "@mui/material/Stack";

import { MainCard } from "../../components/molecules/mainCard";
import { InputModeSelector } from "./InputModeSelector";
import { INPUT_MODE } from "./analyzer.constants";
import { FilePicker } from "../../components/molecules/file-picker";
import { AnalysisResults } from "./AnalysisResults";
import { useCallback } from "react";
import { AnalyzerTextForm } from "./AnalyzerTextForm";
import { useSubmitCIDForAnalysis } from "../../hooks/useSubmitCIDForAnalysis";
import { useSubmitFILEForAnalysis } from "../../hooks/useSubmitFILEForAnalysis";
import { useLetoUser } from "../../hooks/useLetoUser";
import { useAnalyzedCIDs } from "../../hooks/useAnalyzedCIDs";
import { useMemo } from "react";



// 20 MB limit
const MAX_FILE_SIZE = 20 * 1024 * 1024;

function getScore(score) {
  if (score == null) {
    return 0;
  }
  if (isNaN(score)) {
    return "N/A";
  }
  if (typeof score === "string") {
    score = parseFloat(score);
  }
  return score.toFixed(1);
}

function getResultFromScore(score) {
  if (score == null || isNaN(score)) {
    return "N/A";
  }

  score = parseFloat(score);

  if (score <= 2) {
    return "Pass";
  }

  if (score <= 5) {
    return "Warning";
  }

  return "Fail";
}

function transformResults(data = []) {
  return data.map((item) => ({
    cid: item.ipfsCID,
    score: getScore(item.cuckooScore),
    result: getResultFromScore(item.cuckooScore),
  }));
}

export function MalwareAnalyzer() {
  const { user } = useLetoUser();
  const { data: analyzedCIDs } = useAnalyzedCIDs(user?.id);

  const analysisResults = useMemo(() => {
    if (
      analyzedCIDs == null ||
      analyzedCIDs.items == null ||
      !Array.isArray(analyzedCIDs.items)
    ) {
      return [];
    }
    return transformResults(analyzedCIDs.items);
  }, [analyzedCIDs]);

  const submitCIDMutation = useSubmitCIDForAnalysis(user?.id);
  const [inputMode, setInputMode] = useState(INPUT_MODE.CID);

  const handleCIDSubmit = useCallback(
    (cid) => {
      console.log(cid);
      submitCIDMutation
        .mutateAsync(cid)
        .then(() => {
          alert(
            "CID Submitted successfully. Please wait for the analysis results to be available."
          );
        })
        .catch((error) => {
          alert("Error submitting CID. Please try again later.");
          console.error(error);
        });
    },
    [submitCIDMutation]
  );


  const { mutate: submitFile, isLoading, isError, error } = useSubmitFILEForAnalysis(user?.id);

  const handleFileSubmit = useCallback((file) => {
    submitFile(file, {
      onSuccess: (data) => {
        console.log("File upload response:", data);
        // Handle success response here
      },
      onError: (error) => {
        console.error("Error uploading file:", error);
        alert("Error uploading file. Please try again later.");
      }
    });
  }, [submitFile]);



  return (
    <Stack spacing={2}>
      <InputModeSelector selectedMode={inputMode} onModeSelect={setInputMode} />
      <MainCard title="Analyzer Form">
        {inputMode === INPUT_MODE.CID && (
          <AnalyzerTextForm onSubmit={handleCIDSubmit} />
        )}
        {inputMode === INPUT_MODE.FILE && (
          <FilePicker
            onFileSelect={handleFileSubmit}
            supportedFileTypes={{
              "text/csv": [".csv"],
            }}
            maxFileSize={MAX_FILE_SIZE}
          />
        )}
      </MainCard>
      {analysisResults.length > 0 && (
        <MainCard title="Results">
          <AnalysisResults results={analysisResults} />
        </MainCard>
      )}
    </Stack>
  );
}
